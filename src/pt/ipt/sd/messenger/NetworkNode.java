/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pt.ipt.sd.messenger;

import BlockChain.Block;
import BlockChain.BlockChain;
import BlockChain.Transaction;
import GameClasses.Card;
import GameClasses.Player;
import Miners.DistributedMiner;
import static Miners.Miner.mine;
import java.rmi.RemoteException;
import java.security.Key;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import myUtils.RMI;

/**
 *
 * @author Bernardo
 */
public class NetworkNode extends javax.swing.JFrame implements NounceFoundEvent{
  
    IRemoteNetNode remoteNode;
    Key remoteAES;
    RemoteNetNode myNode;
    BlockChain myBlockChain;
    
    //jogadores e cartas para teste
    Player player1;
    Player player2; 
    Card card1;
    Card card2;
    /**
     * Creates new form NetworkNova
     */
    public NetworkNode() {
        initComponents();
        myBlockChain = new BlockChain();
        
        //criar jogadores, cartas e adicionar as cartas às coleções
        player1 = new Player(0, "Toze");
        player2 = new Player(1, "Chico");
        card1 = new Card(0, "Blue Eyes White Dragon", 0, 0);
        card2 = new Card(1, "Dark Magician", 0, 1);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        pnConnectTo = new javax.swing.JPanel();
        btConnect = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        txtConnectAdress = new javax.swing.JTextField();
        txtConnectPortNumber = new javax.swing.JTextField();
        txtConnectObjName = new javax.swing.JTextField();
        pnConnectTo1 = new javax.swing.JPanel();
        btStartServer = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        txtServerPort = new javax.swing.JTextField();
        txtServerObjName = new javax.swing.JTextField();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtNodeList = new javax.swing.JList<>();
        jPanel8 = new javax.swing.JPanel();
        btServiceAddBlock = new javax.swing.JButton();
        txtType = new javax.swing.JTextField();
        txtGiver = new javax.swing.JTextField();
        txtReceiver = new javax.swing.JTextField();
        txtCardGiver = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtServiceMessage = new javax.swing.JTextArea();
        txtCardReceiver = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txtServiceBlock = new javax.swing.JTextArea();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDisplay = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtLog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setLayout(new java.awt.BorderLayout());

        pnConnectTo.setLayout(new java.awt.BorderLayout());

        btConnect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pt/ipt/sd/messenger/start.png"))); // NOI18N
        btConnect.setText("Connect");
        btConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btConnectActionPerformed(evt);
            }
        });
        pnConnectTo.add(btConnect, java.awt.BorderLayout.EAST);

        jPanel5.setLayout(new java.awt.GridLayout(3, 1, 0, 5));

        txtConnectAdress.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtConnectAdress.setText("localhost");
        txtConnectAdress.setBorder(javax.swing.BorderFactory.createTitledBorder("Adress"));
        jPanel5.add(txtConnectAdress);

        txtConnectPortNumber.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtConnectPortNumber.setText("10010");
        txtConnectPortNumber.setBorder(javax.swing.BorderFactory.createTitledBorder("Port Number"));
        jPanel5.add(txtConnectPortNumber);

        txtConnectObjName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtConnectObjName.setText("messenger");
        txtConnectObjName.setBorder(javax.swing.BorderFactory.createTitledBorder("ObjectName"));
        jPanel5.add(txtConnectObjName);

        pnConnectTo.add(jPanel5, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Connect To ....", pnConnectTo);

        pnConnectTo1.setLayout(new java.awt.BorderLayout());

        btStartServer.setIcon(new javax.swing.ImageIcon(getClass().getResource("/pt/ipt/sd/messenger/start.png"))); // NOI18N
        btStartServer.setText("Connect");
        btStartServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btStartServerActionPerformed(evt);
            }
        });
        pnConnectTo1.add(btStartServer, java.awt.BorderLayout.EAST);

        jPanel7.setLayout(new java.awt.GridLayout(2, 0));

        txtServerPort.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtServerPort.setText("10010");
        txtServerPort.setBorder(javax.swing.BorderFactory.createTitledBorder("Port Number"));
        txtServerPort.setPreferredSize(new java.awt.Dimension(200, 36));
        jPanel7.add(txtServerPort);

        txtServerObjName.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        txtServerObjName.setText("messenger");
        txtServerObjName.setBorder(javax.swing.BorderFactory.createTitledBorder("ObjectName"));
        jPanel7.add(txtServerObjName);

        pnConnectTo1.add(jPanel7, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Start Server", pnConnectTo1);

        jScrollPane3.setViewportView(txtNodeList);

        jTabbedPane2.addTab("", jScrollPane3);

        jTabbedPane1.addTab("Network", jTabbedPane2);

        jPanel2.add(jTabbedPane1, java.awt.BorderLayout.WEST);

        jTabbedPane3.addTab("Network", jPanel2);

        btServiceAddBlock.setText("Add Block");
        btServiceAddBlock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btServiceAddBlockActionPerformed(evt);
            }
        });

        txtType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTypeActionPerformed(evt);
            }
        });

        txtServiceMessage.setColumns(20);
        txtServiceMessage.setRows(5);
        jScrollPane1.setViewportView(txtServiceMessage);

        jLabel1.setText("Tipo:");

        jLabel2.setText("Giver");

        jLabel3.setText("Receiver");

        jLabel4.setText("CartaGiver");

        jLabel5.setText("CartaReceiver");

        txtServiceBlock.setColumns(20);
        txtServiceBlock.setRows(5);
        jScrollPane5.setViewportView(txtServiceBlock);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtType, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtGiver, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtReceiver, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCardGiver, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCardReceiver, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btServiceAddBlock, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(0, 27, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                            .addComponent(jScrollPane5)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(txtType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtGiver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(jLabel3)
                        .addGap(1, 1, 1)
                        .addComponent(txtReceiver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(txtCardGiver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCardReceiver, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                        .addComponent(btServiceAddBlock, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane5))
                .addContainerGap())
        );

        jTabbedPane3.addTab("BlockChain", jPanel8);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 333, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 294, Short.MAX_VALUE)
        );

        jTabbedPane3.addTab("Service", jPanel9);

        txtDisplay.setColumns(20);
        txtDisplay.setRows(5);
        jScrollPane2.setViewportView(txtDisplay);

        txtLog.setColumns(20);
        txtLog.setRows(5);
        jScrollPane4.setViewportView(txtLog);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jTabbedPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane3)
                    .addComponent(jScrollPane4))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btStartServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btStartServerActionPerformed
        try {
            int port = Integer.valueOf(txtServerPort.getText());
            myNode = new RemoteNetNode(port,myBlockChain, this);
            RMI.startRemoteObject(myNode, port, RemoteNetNode.NAME);
            displayMessage("Start Server", myNode.getName() + "available");
        } catch (Exception ex) {
            displayLog("erro a iniciar server", ex);
        }
    }//GEN-LAST:event_btStartServerActionPerformed

    private void btConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btConnectActionPerformed
        try {
            int port = Integer.valueOf(txtConnectPortNumber.getText());
            remoteNode = (IRemoteNetNode) RMI.getRemote(
                txtConnectAdress.getText(),
                port, RemoteNetNode.NAME);
            myNode.addNode(remoteNode);

            displayMessage("connected to: ", remoteNode.getName());
        } catch (Exception ex) {
            displayLog("error connecting to: ", ex);
        }
    }//GEN-LAST:event_btConnectActionPerformed

    private void btServiceAddBlockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btServiceAddBlockActionPerformed
        
        displayMessage("blockchain: ", "adding Block");
        //TODO
        //transaction para testar, tem de ir buscar dados à interface mais tarde
        Transaction tr = new Transaction("",player1,player2,card1,card2);
            try {
                Block blk = myNode.myBlockChain.getNewBlock(tr);
                myNode.mine(blk);
                myNode.addBlock(blk);
                txtServiceBlock.setText(myBlockChain.getLastBlock());
            } catch (Exception ex) {
                displayLog("erro ao adicionar bloco", ex);
                Logger.getLogger(NetworkNode.class.getName()).log(Level.SEVERE, null, ex);
            }
        displayMessage("blockchain: ", "Block Ready!");
        
    }//GEN-LAST:event_btServiceAddBlockActionPerformed

    private void txtTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTypeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NetworkNode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NetworkNode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NetworkNode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NetworkNode.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NetworkNode().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btConnect;
    private javax.swing.JButton btServiceAddBlock;
    private javax.swing.JButton btStartServer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JPanel pnConnectTo;
    private javax.swing.JPanel pnConnectTo1;
    private javax.swing.JTextField txtCardGiver;
    private javax.swing.JTextField txtCardReceiver;
    private javax.swing.JTextField txtConnectAdress;
    private javax.swing.JTextField txtConnectObjName;
    private javax.swing.JTextField txtConnectPortNumber;
    private javax.swing.JTextArea txtDisplay;
    private javax.swing.JTextField txtGiver;
    private javax.swing.JTextArea txtLog;
    private javax.swing.JList<String> txtNodeList;
    private javax.swing.JTextField txtReceiver;
    private javax.swing.JTextField txtServerObjName;
    private javax.swing.JTextField txtServerPort;
    private javax.swing.JTextArea txtServiceBlock;
    private javax.swing.JTextArea txtServiceMessage;
    private javax.swing.JTextField txtType;
    // End of variables declaration//GEN-END:variables


    public void displayLog(String source, Exception ex){
       txtLog.setText(source + "\t " + ex.getMessage() + "\n " + txtLog.getText());
       Logger.getLogger(NetworkNode.class.getName()).log(Level.SEVERE, null, ex);
    }

    public void displayMessage(String source, String msg){
        txtDisplay.setText(txtDisplay.getText() + "\n" + source + " - " + msg);
    }
    //displayNetWork do prof.
    public void displayNodes(){
        try {
            DefaultListModel model = new DefaultListModel();
            List<IRemoteNetNode> nodes = myNode.getNodes();
            for(IRemoteNetNode node : myNode.getNodes()){
                model.addElement(node.getName());
            }
        txtNodeList.setModel(model);
        } catch (RemoteException ex) {
            displayLog("erro display nodes!!!!", ex);
        }
    }
    public void displayLastNode(){
        txtServiceMessage.setText(txtServiceMessage.getText() +"\n"+ myBlockChain.getLastBlock().toString());
    }
    //para o gif
    public void setWorking(boolean state){
        txtDisplay.setText(txtDisplay.getText() + "\n" + "miner is working!");
    }          

    @Override
    public void onNounceFound(Block blk) {        
        try {
            myNode.stopMining(blk);
        } catch (RemoteException ex) {
            Logger.getLogger(NetworkNode.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
}
